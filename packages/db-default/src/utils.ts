import chalk from 'chalk'
import { sql } from 'drizzle-orm'
import db from './index'
import * as path from 'path'
import * as fs from 'fs'
/**
 * T√∂rli a megadott s√©m√°kat az adatb√°zisb√≥l.
 * @param schemasToDelete A t√∂rlend≈ë s√©m√°k neveinek t√∂mbje.
 */
export async function deleteSchemas(schemasToDelete: string[]): Promise<void> {
	schemasToDelete.push('drizzle')
	if (!schemasToDelete.includes('public')) {
		schemasToDelete.push('public')
	}

	console.log(chalk.blue.bold('\n[Megl√©v≈ë s√©m√°k t√∂rl√©se - START]'))
	for (const schemaName of schemasToDelete) {
		try {
			await db.execute(sql.raw(`DROP SCHEMA IF EXISTS ${schemaName} CASCADE;`))
			console.log(`   ${chalk.green('‚úî')} ${chalk.cyan(schemaName)} sikeresen t√∂r√∂lve`)
		} catch (error) {
			console.error(
				`   ${chalk.red('‚ùå Hiba a(z)')} ${chalk.cyan(schemaName)} ${chalk.red('s√©ma t√∂rl√©se k√∂zben:')}`,
				error,
			)
			// Opcion√°lis: D√∂nthet√ºnk √∫gy, hogy hiba eset√©n meg√°llunk, vagy folytatjuk a t√∂bbi s√©m√°val.
			process.exit(1)
		}
	}
	console.log(chalk.green.bold('[Megl√©v≈ë s√©m√°k t√∂rl√©se - V√âGE] | üü¢ Sikeresen t√∂r√∂lve') + '\n')
}

export function findSchemas(): string[] {
	const schemasDir = path.resolve(__dirname, 'schemas')
	let schemas: string[] = []

	try {
		console.log(chalk.blue.bold(`[S√©m√°k keres√©se: ${chalk.magenta(schemasDir)}]`))
		const dirents = fs.readdirSync(schemasDir, { withFileTypes: true })
		schemas = dirents.filter((dirent) => dirent.isDirectory()).map((dirent) => dirent.name)

		if (schemas.length > 0) {
			console.log(`   ${chalk.gray('Tal√°lt s√©m√°k:')} ${chalk.cyan(schemas.join(', '))}`)
		} else {
			console.log(
				`   ${chalk.gray('Nem tal√°lhat√≥ alk√∂nyvt√°r (s√©ma) a(z) ')} ${chalk.magenta(schemasDir)}`,
			)
		}
	} catch (error: unknown) {
		// Type guard to safely access error.code
		if (typeof error === 'object' && error !== null && 'code' in error && error.code === 'ENOENT') {
			console.warn(
				`   ${chalk.yellow('‚ö†Ô∏è')} A(z) '${chalk.magenta(schemasDir)}' s√©ma k√∂nyvt√°r nem tal√°lhat√≥.`,
			)
		} else {
			console.error(
				`   ${chalk.red('‚ùå')} Hiba a(z) '${chalk.magenta(schemasDir)}' k√∂nyvt√°r olvas√°sa k√∂zben:`,
				error,
			)
		}
	}

	return schemas
}
